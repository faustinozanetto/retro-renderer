#shader vertex
#version 450 core

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec3 a_normal;
layout (location = 2) in vec2 a_tex_coord;

layout (location = 0) out vec3 o_world_pos;

layout (location = 1) uniform mat4 u_view;
layout (location = 2) uniform mat4 u_projection;

void main() {
    o_world_pos = a_pos;
    mat4 rot_view = mat4(mat3(u_view));
    vec4 clip_pos = u_projection * rot_view * vec4(o_world_pos, 1.0);

    gl_Position = clip_pos.xyww;
}

#shader fragment
#version 450 core

layout (location = 0) in vec3 o_world_pos;

layout(binding = 0) uniform samplerCube g_environment_map;

layout (location = 0) out vec4 frag_color;
        
void main() {
    vec3 env_color = textureLod(g_environment_map, o_world_pos, 0.1).rgb;
    
    // HDR tonemap and gamma correct
    vec3 mapped = vec3(1.0) - exp(-env_color * 0.7);
    // gamma correction 
    mapped = pow(mapped, vec3(1.0 / 1.9));

    frag_color = vec4(mapped, 1.0);
}