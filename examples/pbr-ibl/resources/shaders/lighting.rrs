#shader vertex
#version 450 core

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;

layout (location = 0) out vec2 o_tex_coords;

void main() {
    o_tex_coords = a_tex_coord;
    gl_Position = vec4(a_pos, 1.0f);
}

#shader fragment
#version 450 core

layout (location = 0) out vec4 frag_color;

layout (location = 0) in vec2 o_tex_coord;

layout (binding = 0) uniform sampler2D u_position_map;
layout (binding = 1) uniform sampler2D u_albedo_map;
layout (binding = 2) uniform sampler2D u_normal_map;
layout (binding = 3) uniform sampler2D u_roughmetalao_map;
layout (binding = 4) uniform samplerCube u_irradiance_map;
layout (binding = 5) uniform samplerCube u_prefilter_map;
layout (binding = 6) uniform sampler2D u_brdf_map;

uniform vec3 u_cam_pos;

struct point_light {
    vec3 position;
    vec3 color;
};

struct spot_light {
    vec3 position;
    vec3 color;
    vec3 direction;

    float inner_angle;
    float outer_angle;
};

uniform point_light p_light;
uniform spot_light s_light;

uniform int u_use_irradiance;

uniform mat4 u_view;
uniform mat4 u_projection;

float light_constant = 1.0f;
float light_linear = 0.09f;
float light_quadratic = 0.032f;

const float PI = 3.14159265359;

float DistributionGGX(float NdotH, float a) {
  float a2 = a * a;
  float f = (NdotH * a2 - NdotH) * NdotH + 1.0;
  return a2 / (PI * f * f);
}

vec3 FresnelSchlick(float LdotH, vec3 F0) {
  return F0 + (vec3(1.0) - F0) * pow(1.0 - LdotH, 5.0);
}

vec3 FresnelSchlickRoughness(float LdotV, vec3 F0, float roughness) {
  return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - LdotV, 5.0);
}

float VisibilitySmithGGXCorrelated(float NdotV, float NdotL, float a) {
  float a2 = a * a;
  float GGXV = NdotL * sqrt((NdotV - NdotV * a2) * NdotV + a2);
  float GGXL = NdotV * sqrt((NdotL - NdotL * a2) * NdotL + a2);
  return 0.5 / (GGXV + GGXL);
}

vec3 calculate_cook_torrance_ggx(vec3 normal, vec3 view_direction, vec3 light_direction, vec3 albedo, float roughness, float metallic) {
    vec3 halfway_vec = normalize(light_direction + view_direction);

    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);

    float a = max(roughness * roughness, 0.002025);
    float NdotV = max(dot(normal, view_direction), 1e-4);
    float NdotL = clamp(dot(normal, light_direction), 0.0, 1.0);
    float NdotH = clamp(dot(normal, halfway_vec), 0.0, 1.0);
    float LdotH = clamp(dot(light_direction, halfway_vec), 0.0, 1.0);

    float D = DistributionGGX(NdotH, a);
    vec3 F = FresnelSchlick(LdotH, F0);
    float V = VisibilitySmithGGXCorrelated(NdotV, NdotL, a);

    // Specular BRDF.
    vec3 specular = (D * V) * F;

    vec3 diffuseColor = (1.0 - metallic) * albedo;
    vec3 diffuse = diffuseColor / PI;

    // Calculate shading.
    vec3 light_diffuse = vec3(0.5);
    vec3 light_specular = vec3(1.0);
    return (diffuse * light_diffuse + specular * light_specular) * NdotL;
}

vec3 calculate_point_light(point_light light, vec3 albedo, vec3 normal, vec3 frag_pos, float roughness, float metallic) {
    vec3 light_direction = normalize(light.position - frag_pos);
    vec3 view_direction = normalize(u_cam_pos - frag_pos);

    // Point light attenuation
    float light_distance = length(light.position - frag_pos);
    float attenuation = 1.0 / max(light_constant + light_linear * light_distance + light_quadratic * (light_distance * light_distance), 1e-4);

    vec3 shading_result = calculate_cook_torrance_ggx(normal, view_direction, light_direction, albedo, roughness, metallic);
    return shading_result;
}

vec3 calculate_spot_light(spot_light light, vec3 normal, vec3 frag_pos, vec3 view_dir) { 
    vec3 light_dir = normalize(light.position - frag_pos);
    // diffuse shading
    float diff = max(dot(normal, light_dir), 0.0);
    // attenuation
    float distance = length(light.position - frag_pos);
    float attenuation = 1.0 / (light_constant + light_linear * distance + light_quadratic * (distance * distance));       
    // spotlight intensity
    float theta = dot(light_dir, normalize(-light.direction)); 
    float epsilon = light.inner_angle - light.outer_angle;
    float intensity = clamp((theta - light.outer_angle) / epsilon, 0.0, 1.0);
    // combine results
    vec3 ambient = light.color * vec3(texture(u_albedo_map, o_tex_coord));
    ambient *= attenuation * intensity;
    return ambient;
}

vec3 sample_irradiance_map(vec3 normal_world_space) {
    return texture(u_irradiance_map, normalize(normal_world_space)).rgb;
}

vec3 sample_prefilter_map(vec3 reflection_dir_world_space, float roughness) {
    const float MAX_REFLECTION_LOD = 4.0;
    float mip_level = roughness * MAX_REFLECTION_LOD;
    return textureLod(u_prefilter_map, reflection_dir_world_space, mip_level).rgb;
}

vec2 sample_brdf_lut_map(vec3 view_dir_world_space, vec3 normal_world_space, float roughness) {
 //   float NdotV = clamp(dot(normal_world_space, view_dir_world_space), 0.0, 1.0);
   // return texture(u_brdf_map, vec2(NdotV, roughness)).rg;
    return texture(u_brdf_map, vec2(max(dot(normal_world_space, view_dir_world_space), 0.0), roughness)).rg;
}

vec3 calculate_ambient_ibl(vec3 albedo, vec3 normal, vec3 view_dir, vec3 irradiance, vec3 prefilter, vec2 brdf_lut, float roughness, float metallic, float ambient_occlusion) {
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);

    vec3 F = FresnelSchlickRoughness(clamp(dot(normal, view_dir), 0.0, 1.0), F0, roughness);

    vec3 kS = F;
    vec3 kD = 1.0 - kS;
    kD *= 1.0 - metallic;

    vec3 diffuse = kD * irradiance * albedo;
    vec3 specular = prefilter * (F * brdf_lut.x + brdf_lut.y);

    return (diffuse + specular) * ambient_occlusion;
}

void main()
{
    vec3 frag_pos_view_space = texture(u_position_map, o_tex_coord).rgb;
    vec3 normal_view_space = texture(u_normal_map, o_tex_coord).rgb;
    vec3 albedo = texture(u_albedo_map, o_tex_coord).rgb;
    vec3 roughmetalao = texture(u_roughmetalao_map, o_tex_coord).rgb;
    float roughness = roughmetalao.r;
    float metallic = roughmetalao.g;
    float ambient_occlusion = roughmetalao.b;

    vec3 luminance;
    // point lighting
    luminance = calculate_point_light(p_light, albedo, normal_view_space, frag_pos_view_space, roughness, metallic);

    // ibl ambient
    vec3 normal_world_space = mat3(transpose(u_view)) * normal_view_space;
    vec3 view_dir_world_space = mat3(inverse(u_view)) * normalize(u_cam_pos - frag_pos_view_space);
    vec3 reflection_dir_world_space = reflect(-view_dir_world_space, normal_world_space);

    vec3 irradiance = sample_irradiance_map(normal_world_space);
    vec3 prefilter = sample_prefilter_map(reflection_dir_world_space, roughness);
    vec2 brdf_lut = sample_brdf_lut_map(view_dir_world_space, normal_world_space, roughness);

    luminance += calculate_ambient_ibl(albedo, normal_world_space, view_dir_world_space, irradiance, prefilter, brdf_lut, roughness, metallic, ambient_occlusion);

    vec3 color = luminance;
    // gamma correct
    color = pow(color, vec3(1.0/2.2)); 

    frag_color = vec4(color, 1.0);
}