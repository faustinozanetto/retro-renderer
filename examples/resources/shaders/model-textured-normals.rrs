#shader vertex
#version 450 core

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;
layout (location = 2) in vec3 a_normal;
layout (location = 3) in vec3 a_tangent;
layout (location = 4) in vec3 a_bitangnet;

layout (location = 0) out vec2 o_tex_coord;
layout (location = 1) out vec3 o_frag_pos;
layout (location = 2) out mat3 o_tbn;

layout (location = 0) uniform mat4 u_transform;
layout (location = 1) uniform mat4 u_view;
layout (location = 2) uniform mat4 u_projection;

void main() {
    o_tex_coord = a_tex_coord;
    o_frag_pos = vec3(u_transform * vec4(a_pos, 1.0));

    vec3 T = normalize(vec3(u_transform * vec4(a_tangent,   0.0)));
    vec3 N = normalize(vec3(u_transform * vec4(a_normal,    0.0)));
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);
    o_tbn = mat3(T, B, N);

    gl_Position = u_projection * u_view * u_transform * vec4(a_pos, 1.0f);
}

#shader fragment
#version 450 core

layout (location = 0) out vec4 frag_color;

layout (location = 0) in vec2 o_tex_coord;
layout (location = 1) in vec3 o_frag_pos;
layout (location = 2) in mat3 o_tbn;

layout (binding = 0) uniform sampler2D u_albedo_map;
layout (binding = 1) uniform sampler2D u_normal_map;

struct point_light {
    vec3 position;
    vec3 color;
};

uniform vec3 u_cam_pos;
uniform point_light p_light;

const float ambient_strength = 0.4 * 2.0;
const float specular_strength = 0.5 * 2.0;
const float specular_shininess = 32.0;

vec3 calculate_lighting(vec3 albedo, vec3 normal, vec3 view_dir) {
    vec3 light_dir = normalize(p_light.position - o_frag_pos);
    vec3 halfway_dir = normalize(light_dir + view_dir);
    vec3 diffuse = max(dot(light_dir, normal), 0.0) * p_light.color;
    vec3 specular = pow(max(dot(normal, halfway_dir), 0.0), specular_shininess) * specular_strength * p_light.color;
    vec3 ambient = ambient_strength * p_light.color;
    return ambient + diffuse + specular;
}

void main() {
    vec3 albedo = texture(u_albedo_map, o_tex_coord).rgb;
    vec3 normal = texture(u_normal_map, o_tex_coord).rgb * 2.0 - 1.0;
    normal = normalize(o_tbn * normal);
    vec3 view_dir = normalize(u_cam_pos - o_frag_pos);
    vec3 lighting = calculate_lighting(albedo, normal, view_dir);

    frag_color = vec4(lighting * albedo, 1.0);
}