#shader vertex
#version 450 core

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;
layout (location = 2) in vec3 a_normal;

layout (location = 0) out vec2 o_tex_coord;
layout (location = 1) out vec3 o_frag_pos;
layout (location = 2) out vec3 o_normal;

layout (location = 0) uniform mat4 u_transform;
layout (location = 1) uniform mat4 u_view;
layout (location = 2) uniform mat4 u_projection;

uniform int u_reverse_normals;

void main() {
    o_tex_coord = a_tex_coord;
    vec3 normal = a_normal;
    if (u_reverse_normals == 1) {
        normal = a_normal * -1.0;
    }
    o_normal = transpose(inverse(mat3(u_transform))) * normal;
    o_frag_pos = vec3(u_transform * vec4(a_pos, 1.0));
    gl_Position = u_projection * u_view * vec4(o_frag_pos, 1.0);
}

#shader fragment
#version 450 core

layout (location = 0) out vec4 frag_color;

layout (location = 0) in vec2 o_tex_coord;
layout (location = 1) in vec3 o_frag_pos;
layout (location = 2) in vec3 o_normal;

layout (binding = 0) uniform sampler2D u_texture;
layout (binding = 1) uniform samplerCube u_shadow_map;

uniform vec3 u_cam_pos;

struct point_light {
    vec3 position;
    vec3 color;
};

uniform point_light p_light;
uniform float u_far_plane;
uniform float u_shadow_bias;

float light_constant = 1.0f;
float light_linear = 0.09f;
float light_quadratic = 0.032f;

vec3 offsets[20] = vec3[]
(
   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);


float calculate_point_shadows(vec3 frag_pos, vec3 view_pos) {
    vec3 frag_to_light = frag_pos - p_light.position; 
    float current_depth  = length(frag_to_light);

    // pcf shadows
    float shadow = 0.0;
    int samples = 20;
    float view_distance = length(view_pos - frag_pos);
    float disk_radius = (1.0 + (view_distance / u_far_plane)) / 15.0;
    for(int i = 0; i < samples; ++i)
    {
        float closest_depth = texture(u_shadow_map, frag_to_light + offsets[i] * disk_radius).r;
        closest_depth *= u_far_plane;   // undo mapping [0;1]
        if(current_depth - u_shadow_bias > closest_depth)
            shadow += 1.0;
    }
    shadow /= float(samples);

    return shadow;
}

vec3 calculate_point_light(point_light light, vec3 normal, vec3 frag_pos, vec3 view_dir) {
    vec3 light_dir = normalize(light.position - frag_pos);
    // diffuse shading
    float diff = max(dot(normal, light_dir), 0.0);
    // attenuation
    float distance = length(light.position - frag_pos);
    float attenuation = 1.0 / (light_constant + light_linear * distance + light_quadratic * (distance * distance));    
    // combine results
    vec3 ambient = light.color;
    ambient *= attenuation;
    return ambient;
}

void main()
{
    vec3 normal = normalize(o_normal);
    vec3 view_dir = normalize(u_cam_pos - o_frag_pos);

    // ambient
    vec3 ambient = 0.3 * p_light.color;

    vec3 luminance = calculate_point_light(p_light, normal, o_frag_pos, view_dir);
    float shadow = calculate_point_shadows(o_frag_pos, u_cam_pos);

    vec3 albedo = texture(u_texture, o_tex_coord).rgb;
    vec3 lighting = (ambient + (1.0 - shadow) * (luminance)) * albedo;    

    frag_color = vec4(lighting, 1.0);
}