#shader vertex
#version 450 core

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;
layout (location = 2) in vec3 a_normal;
layout (location = 3) in vec3 a_tangent;
layout (location = 4) in vec3 a_bitangent;

layout (location = 0) uniform mat4 u_transform;
layout (location = 1) uniform mat4 u_view;
layout (location = 2) uniform mat4 u_projection;

struct point_light {
    vec3 position;
    vec3 color;
};

out geometry_out {
    vec3 frag_pos;
    vec2 tex_coords;
    vec3 tangent_light_pos;
    vec3 tangent_view_pos;
    vec3 tangent_frag_pos;
} o_geom_out;

uniform vec3 u_cam_pos;
uniform point_light p_light;

void main() {
    o_geom_out.tex_coords = a_tex_coord;
    o_geom_out.frag_pos = vec3(u_transform * vec4(a_pos, 1.0));

    vec3 T = normalize(mat3(u_transform) * a_tangent);
    vec3 B = normalize(mat3(u_transform) * a_bitangent);
    vec3 N = normalize(mat3(u_transform) * a_normal);
    mat3 TBN = transpose(mat3(T, B, N));

    o_geom_out.tangent_light_pos = TBN * p_light.position;
    o_geom_out.tangent_view_pos  = TBN * u_cam_pos;
    o_geom_out.tangent_frag_pos  = TBN * o_geom_out.frag_pos;

    gl_Position = u_projection * u_view * u_transform * vec4(a_pos, 1.0f);
}

#shader fragment
#version 450 core

layout (location = 0) out vec4 frag_color;

layout (binding = 0) uniform sampler2D u_albedo_map;
layout (binding = 1) uniform sampler2D u_normal_map;
layout (binding = 2) uniform sampler2D u_depth_map;

in geometry_out {
    vec3 frag_pos;
    vec2 tex_coords;
    vec3 tangent_light_pos;
    vec3 tangent_view_pos;
    vec3 tangent_frag_pos;
} o_geom_in;

struct point_light {
    vec3 position;
    vec3 color;
};

uniform vec3 u_cam_pos;
uniform float u_parallax_scale;
uniform point_light p_light;

const float ambient_strength = 0.4 * 2.0;
const float specular_strength = 0.5 * 2.0;
const float specular_shininess = 32.0;

vec2 calculate_parallax_mapping(vec2 tex_coords, vec3 view_dir) {
    // number of depth layers
    const float minLayers = 8;
    const float maxLayers = 32;
    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), view_dir)));  
    // calculate the size of each layer
    float layerDepth = 1.0 / numLayers;
    // depth of current layer
    float currentLayerDepth = 0.0;
    // the amount to shift the texture coordinates per layer (from vector P)
    vec2 P = view_dir.xy / view_dir.z * u_parallax_scale; 
    vec2 deltaTexCoords = P / numLayers;
  
    // get initial values
    vec2  currentTexCoords     = tex_coords;
    float currentDepthMapValue = texture(u_depth_map, currentTexCoords).r;
      
    while(currentLayerDepth < currentDepthMapValue)
    {
        // shift texture coordinates along direction of P
        currentTexCoords -= deltaTexCoords;
        // get depthmap value at current texture coordinates
        currentDepthMapValue = 1.0 - texture(u_depth_map, currentTexCoords).r;  
        // get depth of next layer
        currentLayerDepth += layerDepth;  
    }
    
    // get texture coordinates before collision (reverse operations)
    vec2 prevTexCoords = currentTexCoords + deltaTexCoords;

    // get depth after and before collision for linear interpolation
    float afterDepth  = currentDepthMapValue - currentLayerDepth;
    float beforeDepth = 1.0 - texture(u_depth_map, prevTexCoords).r - currentLayerDepth + layerDepth;
 
    // interpolation of texture coordinates
    float weight = afterDepth / (afterDepth - beforeDepth);
    currentTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);
    
    if(currentTexCoords.x > 1.0 || currentTexCoords.y > 1.0 || currentTexCoords.x < 0.0 || currentTexCoords.y < 0.0)
        discard;

    return currentTexCoords;   
}

vec3 calculate_lighting(vec3 albedo, vec3 normal, vec3 view_dir) {
    vec3 light_dir = normalize(p_light.position - o_geom_in.frag_pos);
    vec3 halfway_dir = normalize(light_dir + view_dir);
    vec3 diffuse = max(dot(light_dir, normal), 0.0) * p_light.color;
    vec3 specular = pow(max(dot(normal, halfway_dir), 0.0), specular_shininess) * specular_strength * p_light.color;
    vec3 ambient = ambient_strength * p_light.color;
    return ambient + diffuse + specular;
}

void main() {
    vec3 view_dir = normalize(o_geom_in.tangent_view_pos - o_geom_in.tangent_frag_pos);
    vec2 tex_coord = calculate_parallax_mapping(o_geom_in.tex_coords, view_dir);         

    // obtain normal from normal map
    vec3 normal = texture(u_normal_map, tex_coord).rgb;
    normal = normalize(normal * 2.0 - 1.0);   
   
    // get diffuse color
    vec3 color = texture(u_albedo_map, tex_coord).rgb;
    // ambient
    vec3 ambient = 0.1 * color;
    // diffuse
    vec3 lightDir = normalize(o_geom_in.tangent_light_pos - o_geom_in.tangent_frag_pos);
    float diff = max(dot(lightDir, normal), 0.0);
    vec3 diffuse = diff * color;
   
    //vec3 lighting = calculate_lighting(albedo, normal, view_dir);

    frag_color = vec4(ambient + diffuse, 1.0);
}