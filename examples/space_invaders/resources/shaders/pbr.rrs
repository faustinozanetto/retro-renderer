#shader vertex
#version 450 core

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;

layout (location = 0) out vec2 o_tex_coords;

void main() {
    o_tex_coords = a_tex_coord;
    gl_Position = vec4(a_pos, 1.0f);
}

#shader fragment
#version 450 core

layout (location = 0) out vec4 frag_color;

layout (location = 0) in vec2 o_tex_coord;

layout (binding = 0) uniform sampler2D u_position_map;
layout (binding = 1) uniform sampler2D u_albedo_map;
layout (binding = 2) uniform sampler2D u_normal_map;
layout (binding = 3) uniform sampler2D u_roughmetalao_map;
layout (binding = 4) uniform sampler2D u_emissive_map;

struct directional_light {
    vec3 position;
    vec3 direction;
	vec3 color;
};

uniform directional_light u_directional_light;
uniform vec3 u_cam_pos;

const float PI = 3.14159265359;

/* =================== Utilities Functions =================== */
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 calculate_directional_light(directional_light light, vec3 albedo, vec3 normal, vec3 frag_pos, vec3 light_dir, vec3 view_dir, vec3 F0, float roughness, float metallic) {
    vec3 halfway_vec = normalize(view_dir + light_dir);

    // Cook-Torrance BRDF
    float NDF = DistributionGGX(normal, halfway_vec, roughness);   
    float G   = GeometrySmith(normal, view_dir, light_dir, roughness);      
    vec3 F    = FresnelSchlick(max(dot(halfway_vec, view_dir), 0.0), F0);

    vec3 numerator    = NDF * G * F; 
    float denominator = 4.0 * max(dot(normal, view_dir), 0.0) * max(dot(normal, light_dir), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
    vec3 specular = numerator / denominator;

    // kS is equal to Fresnel
    vec3 kS = F;
    // for energy conservation, the diffuse and specular light can't
    // be above 1.0 (unless the surface emits light); to preserve this
    // relationship the diffuse component (kD) should equal 1.0 - kS.
    vec3 kD = vec3(1.0) - kS;
    // multiply kD by the inverse metalness such that only non-metals 
    // have diffuse lighting, or a linear blend if partly metal (pure metals
    // have no diffuse light).
    kD *= 1.0 - metallic;	 

    // scale light by NdotL
    float NdotL = max(dot(normal, light_dir), 0.0);        

    // add to outgoing radiance Lo
    return (kD * albedo / PI + specular) * light.color * NdotL;  
}

void main()
{
    vec3 frag_pos = texture(u_position_map, o_tex_coord).rgb;
    vec3 albedo = pow(texture(u_albedo_map, o_tex_coord).rgb, vec3(2.2));
    vec3 normal = texture(u_normal_map, o_tex_coord).rgb;
    vec3 roughmetalao = texture(u_roughmetalao_map, o_tex_coord).rgb;
    vec3 emissive = texture(u_emissive_map, o_tex_coord).rgb;
    float roughness = roughmetalao.r;
    float metallic = roughmetalao.g;
    float ambient_occlusion = roughmetalao.b;
    
    vec3 view_dir = normalize(u_cam_pos - frag_pos);
    vec3 reflect_dir = reflect(-view_dir, normal);
    
    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, metallic);
    
    vec3 light_dir = normalize(-u_directional_light.direction);
    
    vec3 lighting = vec3(0.0);
    lighting = calculate_directional_light(u_directional_light, albedo, normal, frag_pos, light_dir, view_dir, F0, roughness, metallic);
    
    vec3 ambient = vec3(0.03) * albedo * ambient_occlusion;
    vec3 color = ambient + lighting + emissive;
    // HDR tonemapping
    color = color / (color + vec3(1.0));
    // gamma correct
    color = pow(color, vec3(1.0/2.2)); 

    frag_color = vec4(color, 1.0);
}