#shader vertex
#version 450 core

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;
layout (location = 2) in vec3 a_normal;

layout (location = 0) out vec2 o_tex_coord;
layout (location = 1) out vec3 o_frag_pos;

layout (location = 0) uniform mat4 u_transform;
layout (location = 1) uniform mat4 u_view;
layout (location = 2) uniform mat4 u_projection;

void main() {
    o_tex_coord = a_tex_coord;
    o_frag_pos = vec3(u_transform * vec4(a_pos, 1.0));
    gl_Position = u_projection * u_view * vec4(o_frag_pos, 1.0);
}

#shader fragment
#version 450 core

layout (location = 0) out vec4 frag_color;

layout (location = 0) in vec2 o_tex_coord;
layout (location = 1) in vec3 o_frag_pos;

layout (binding = 0) uniform sampler2D u_texture;

uniform vec3 u_light_pos;
uniform vec3 u_light_color;

float light_constant = 1.0f;
float light_linear = 0.09f;
float light_quadratic = 0.032f;

void main()
{
    // attenuation
    float distance    = length(u_light_pos - o_frag_pos);
    float attenuation = 1.0 / (light_constant + light_linear * distance + light_quadratic * (distance * distance));    

    vec3 albedo = texture(u_texture, o_tex_coord).rgb * u_light_color;
    albedo *= attenuation;

    frag_color = vec4(albedo, 1.0);
}