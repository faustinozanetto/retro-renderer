#shader vertex
#version 450 core

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;

layout (location = 0) out vec2 o_tex_coords;

void main() {
    o_tex_coords = a_tex_coord;
    gl_Position = vec4(a_pos, 1.0f);
}

#shader fragment
#version 450 core

#define SAMPLES_COUNT 64

layout (location = 0) out float frag_color;

layout(location = 0) in vec2 o_tex_coords;

layout (binding = 0) uniform sampler2D u_position_map;
layout (binding = 1) uniform sampler2D u_normal_map;
layout (binding = 2) uniform sampler2D u_ssao_noise_map;

layout (location = 0) uniform int u_kernel_size;
layout (location = 1) uniform float u_ssao_radius;
layout (location = 2) uniform float u_ssao_bias;
layout (location = 3) uniform vec2 u_noise_size;
layout (location = 4) uniform vec3 u_samples[SAMPLES_COUNT];
uniform mat4 u_view;
uniform mat4 u_projection;

void main() {
	vec3 frag_pos = texture(u_position_map, o_tex_coords).rgb;
	vec3 normal = normalize(texture(u_normal_map, o_tex_coords).rgb);
	vec3 random_vec = normalize(texture(u_ssao_noise_map, o_tex_coords * u_noise_size).xyz);

	vec3 tangent = normalize(random_vec - normal * dot(random_vec, normal));
	vec3 bi_tangent = cross(normal, tangent);
	mat3 tbn = mat3(tangent, bi_tangent, normal);

	float ssao_occlusion = 0.0;

	for (int i = 0; i < u_kernel_size; i++) {
		vec3 sample_pos = tbn * u_samples[i];
		sample_pos = frag_pos + sample_pos * u_ssao_radius;

		vec4 offset = vec4(sample_pos, 1.0);
		offset = u_projection * offset;
		offset.xyz /= offset.w; // perspective divide
        offset.xy = offset.xy * 0.5 + 0.5; // transform to range 0.0 - 1.0

		float sample_depth = texture(u_position_map, offset.xy).z; 

		// range check & accumulate
        float range_check = smoothstep(0.0, 1.0, u_ssao_radius / length(frag_pos.z - sample_depth));
        ssao_occlusion += (sample_depth >= sample_pos.z + u_ssao_bias ? 1.0 : 0.0) * range_check;    
	}
	frag_color = 1.0 - (ssao_occlusion / u_kernel_size);
}