#shader vertex
#version 450 core

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;
layout (location = 2) in vec3 a_normal;
layout (location = 3) in vec3 a_tangent;
layout (location = 4) in vec3 a_bitangent;

layout (location = 0) uniform mat4 u_transform;
layout (location = 1) uniform mat4 u_view;
layout (location = 2) uniform mat4 u_projection;

struct geometry_out {
    vec3 frag_pos;
    vec2 tex_coords;
    vec3 normal;
    mat3 tbn;
};

layout (location = 0) out geometry_out o_geometry;

void main() {
    vec4 view_pos  = u_view * u_transform * vec4(a_pos, 1.0f);
    o_geometry.tex_coords = a_tex_coord;
    o_geometry.frag_pos = view_pos.xyz;
    // o_geometry.view_pos = view_pos.xyz;

    vec3 T = normalize(mat3(u_transform) * a_tangent);
    vec3 B = normalize(mat3(u_transform) * a_bitangent);
    vec3 N = normalize(mat3(u_transform) * a_normal);
    mat3 TBN = transpose(mat3(T, B, N));
    o_geometry.tbn = TBN;

    gl_Position = u_projection * view_pos;
}

#shader fragment
#version 450 core

struct geometry_out {
    vec3 frag_pos;
    vec2 tex_coords;
    vec3 normal;
    mat3 tbn;
};

layout(location = 0) in geometry_out o_geometry;

layout (binding = 0) uniform sampler2D u_albedo_map;
layout (binding = 1) uniform sampler2D u_normal_map;

layout(location = 0) out vec3 g_position;	
layout(location = 1) out vec4 g_albedo;
layout(location = 2) out vec3 g_normal;

void main() {
    g_position = o_geometry.frag_pos;
    g_albedo = texture(u_albedo_map, o_geometry.tex_coords);

    vec3 normal = texture(u_normal_map, o_geometry.tex_coords).rgb;
    normal = normalize(normal * 2.0 - 1.0);
    g_normal = normalize(o_geometry.tbn * normal);
}