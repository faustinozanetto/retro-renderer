#shader vertex
#version 450 core

layout (location = 0) in vec3 a_pos;
layout (location = 1) in vec2 a_tex_coord;

layout (location = 0) out vec2 o_tex_coords;

void main() {
    o_tex_coords = a_tex_coord;
    gl_Position = vec4(a_pos, 1.0f);
}

#shader fragment
#version 450 core

layout (location = 0) out vec4 frag_color;

layout (location = 0) in vec2 o_tex_coord;

layout (binding = 0) uniform sampler2D u_position_map;
layout (binding = 1) uniform sampler2D u_albedo_map;
layout (binding = 2) uniform sampler2D u_normal_map;
layout (binding = 3) uniform sampler2D u_ssao_map;

uniform vec3 u_cam_pos;

struct point_light {
    vec3 position;
    vec3 color;
};

struct spot_light {
    vec3 position;
    vec3 color;
    vec3 direction;

    float inner_angle;
    float outer_angle;
};

uniform point_light p_light;
uniform spot_light s_light;

uniform int u_light_type;

float light_constant = 1.0f;
float light_linear = 0.09f;
float light_quadratic = 0.032f;

vec3 calculate_point_light(point_light light, vec3 normal, vec3 frag_pos, vec3 view_dir) {
    float ambient_occlusion = texture(u_ssao_map, o_tex_coord).r;
    vec3 light_dir = normalize(light.position - frag_pos);
    // diffuse shading
    float diff = max(dot(normal, light_dir), 0.0);
    // attenuation
    float distance = length(light.position - frag_pos);
    float attenuation = 1.0 / (light_constant + light_linear * distance + light_quadratic * (distance * distance));    
    // combine results
    vec3 ambient = light.color * vec3(texture(u_albedo_map, o_tex_coord)) * ambient_occlusion;
    ambient *= attenuation;
    return ambient;
}

vec3 calculate_spot_light(spot_light light, vec3 normal, vec3 frag_pos, vec3 view_dir) { 
    vec3 light_dir = normalize(light.position - frag_pos);
    // diffuse shading
    float diff = max(dot(normal, light_dir), 0.0);
    // attenuation
    float distance = length(light.position - frag_pos);
    float attenuation = 1.0 / (light_constant + light_linear * distance + light_quadratic * (distance * distance));       
    // spotlight intensity
    float theta = dot(light_dir, normalize(-light.direction)); 
    float epsilon = light.inner_angle - light.outer_angle;
    float intensity = clamp((theta - light.outer_angle) / epsilon, 0.0, 1.0);
    // combine results
    vec3 ambient = light.color * vec3(texture(u_albedo_map, o_tex_coord));
    ambient *= attenuation * intensity;
    return ambient;
}

void main()
{
    vec3 normal = texture(u_normal_map, o_tex_coord).rgb;
    vec3 frag_pos = texture(u_position_map, o_tex_coord).rgb;
    vec3 view_dir = normalize(u_cam_pos - frag_pos);

    vec3 result = calculate_point_light(p_light, normal, frag_pos, view_dir);

   frag_color = vec4(result, 1.0);
}